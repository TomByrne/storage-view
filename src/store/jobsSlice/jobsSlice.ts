import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../store';
import { invoke } from '@tauri-apps/api/tauri'
import { listen } from '@tauri-apps/api/event';

export interface JobsState {
    lastJobId: number,
    jobs: JobInfo[],
}

export interface JobBrief {
    id: number,
    path: string,
}

export interface JobInfo extends JobBrief {
    root: FileNode,
    nodes: Record<string, FileNode>,
    state: JobState
}

export enum JobState {
    doing = "doing",
    done = "done",
}

const initialState: JobsState = {
    lastJobId: 0,
    jobs: [],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(createAsync("C:\"))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
const createAsync = createAsyncThunk(
    'jobs/create',
    async ({ id, path }: JobBrief, { dispatch }) => {
        const unlisten = await listen('create_job/prog', event => {
            dispatch({
                type: "jobs/progress",
                payload: event.payload,
            });
        })
        console.log("Begin job");
        await invoke<string>('create_job', { id: id, path: path });
        console.log("End job");
        unlisten();
    }
);

function updateJob(job: JobInfo, progress: JobProgress) {
    for (const file of progress.files) updateJobFile(job, file);
}
function updateJobFile(job: JobInfo, file: JobFileInfo) {
    console.log("updateJobFile.start: ", job, file);
    let node: FileNode = getNode(job, file.name, file.path);
    node.info = file;
    node.name = file.name;
    node.value = file.size;
    console.log("updateJobFile.end: ", job, file, node);
}

const path_regex = /(.*)(\\|\/)(.*)/;
function getNode(job: JobInfo, file_name: string, file_path: string): FileNode {
    if (file_path !== job.path) {
        let node = job.nodes[job.path];
        if (node) return node;

        const match = file_path.match(path_regex);
        if (!match || match.length < 4) {
            let msg = "Failed to match path: " + file_path;
            console.log(msg);
            throw new Error(msg);
        }

        const parent_path = match[1];
        const parent_name = match[3];
        // console.log("Parent: ", parent_name, parent_path);
        const parent = getNode(job, parent_name, parent_path);
        node = {
            name: file_name,
            value: 0,
        };
        
        if (!parent.map) parent.map = {};
        parent.map[file_name] = node;
        
        if (!parent.children) parent.children = [];
        parent.children.push(node);

        job.nodes[file_path] = node;

        return node;

    } else {
        job.nodes[file_name] = job.root;
        return job.root;
    }
}

export const jobsSlice = createSlice({
    name: 'jobs',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        progress: (state, action) => {
            const progress: JobProgress = action.payload;
            const job = state.jobs.find(j => j.id === progress.job);
            if (!job) {
                console.warn(`Ignoring update for expired job: ${progress.job}`, progress);
                return
            }
            updateJob(job, progress);
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(createAsync.pending, (state, action) => {
                console.log("createAsync.pending", state, action);
                const jobBrief: JobBrief = action.meta.arg;
                const job = state.jobs.find(j => j.id === jobBrief.id);
                if (job) {
                    console.error("Job with ID already exists: ", job);
                    return;
                }
                state.jobs.push({
                    ...jobBrief,
                    state: JobState.doing,
                    root: {
                        name: "",
                        value: 0,
                    },
                    nodes: {},
                });
            })
            .addCase(createAsync.fulfilled, (state, action) => {
                const job = state.jobs.find(j => j.id === action.meta.arg.id);
                console.log("createAsync.fulfilled", JSON.stringify(job, null, " "));
                if (!job) {
                    console.error("Failed to find job: ", action.meta.arg.id);
                    return;
                }
                job.state = JobState.done;
            });
    },
});

export const findJob = (state: RootState, job: number) => state.jobs.jobs.find(j => j.id == job);

// export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectJob = (state: RootState) => state.jobs.jobs[state.jobs.jobs.length-1];

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const createJob = (path: string): AppThunk => (
    dispatch,
    getState
) => {
    console.log("createJob: ", path);
    const state = getState();
    const currJob = selectJob(state);
    const id = state.jobs.lastJobId + 1;
    if (currJob) {
        if(currJob.state === JobState.doing){
            console.warn("Job already running, aborting");
            return;
        }

    }
    dispatch(createAsync({ id, path }));
};

export default jobsSlice.reducer;


export interface FileNode {
    info?: JobFileInfo,
    map?: Record<string, FileNode>,
    children?: FileNode[],
    name: string,
    value: number,
}

// From Rust
export interface JobProgress {
    job: number,
    files: JobFileInfo[],
}
export interface JobFileInfo {
    path: string,
    name: string,
    is_dir: boolean,

    depth: number,
    index: number,
    total: number,

    time: number, // seconds
    size: number, // bytes
}
